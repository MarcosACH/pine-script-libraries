// This Pine Script™ code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © MarcosACH
// Created by Marcos Achaval
// Last updated: July 13, 2024

//@version=5
// @description A collection of frequently used candle analysis functions in my scripts.
library("CandleAnalysis")
import MarcosACH/MarketAnalysis/1 as MktA

// @function Checks if a specific bar is bullish.
// @param barsBack (int) The number of bars to look back. The default is 0 (current bar).
// @returns True if the bar is bullish, otherwise returns false.
export isBullish(int barsBack = 0) =>
    close[barsBack] > open[barsBack]

// @function Checks if a specific bar is bearish.
// @param barsBack (int) The number of bars to look back. The default is 0 (current bar).
// @returns True if the bar is bearish, otherwise returns false.
export isBearish(int barsBack = 0) =>
    close[barsBack] < open[barsBack]

// @function Checks if a specific bar is break even.
// @param barsBack (int) The number of bars to look back. The default is 0 (current bar).
// @returns True if the bar is break even, otherwise returns false.
export isBE(int barsBack = 0) =>
    close[barsBack] == open[barsBack]

// @function Calculates a specific candle's body size.
// @param barsBack (int) The number of bars to look back. The default is 0 (current bar).
// @param inPriceChg (bool) True to return the body size as a price change value. The default is false (in points).
// @returns The candle's body size in points.
export getBodySize(int barsBack = 0, bool inPriceChg = false) => 
    if inPriceChg
        math.abs(close[barsBack] - open[barsBack])
    else
        math.abs(close[barsBack] - open[barsBack]) / syminfo.mintick

// @function Calculates a specific candle's top wick size.
// @param barsBack (int) The number of bars to look back. The default is 0 (current bar).
// @param inPriceChg (bool) True to return the wick size as a price change value. The default is false (in points).
// @returns The candle's top wick size in points.
export getTopWickSize(int barsBack = 0, bool inPriceChg = false) => 
    if inPriceChg
        math.abs(high[barsBack] - (isBullish(barsBack) or isBE(barsBack) ? close[barsBack] : open[barsBack]))
    else
        math.abs(high[barsBack] - (isBullish(barsBack) or isBE(barsBack) ? close[barsBack] : open[barsBack])) / syminfo.mintick

// @function Calculates a specific candle's bottom wick size.
// @param barsBack (int) The number of bars to look back. The default is 0 (current bar).
// @param inPriceChg (bool) True to return the wick size as a price change value. The default is false (in points).
// @returns The candle's bottom wick size in points.
export getBottomWickSize(int barsBack = 0, bool inPriceChg = false) => 
    if inPriceChg
        math.abs((isBearish(barsBack) ? close[barsBack] : open[barsBack]) - low[barsBack])
    else
        math.abs((isBearish(barsBack) ? close[barsBack] : open[barsBack]) - low[barsBack]) / syminfo.mintick

// @function Calculates a specific candle's body size as a percentage of its entire size including its wicks.
// @param barsBack (int) The number of bars to look back. The default is 0 (current bar).
// @returns The candle's body size percentage.
export getBodyPercent(int barsBack = 0) => 
  math.abs(open[barsBack] - close[barsBack]) / math.abs(high[barsBack] - low[barsBack]) * 100

// @function Checks if a specific bar is a hammer candle based on a given fibonacci level.
// @param fib (float) The fibonacci level to base candle's body on. The default is 0.382.
// @param bullish (bool) True if the candle must to be green. The default is false.
// @param barsBack (int) The number of bars to look back. The default is 0 (current bar).
// @returns True if the bar matches the requirements of a hammer candle, otherwise returns false.
export isHammer(float fib = 0.382, bool bullish = false, int barsBack = 0) =>
    bullFib = MktA.bullFibRet(low[barsBack], high[barsBack], fib)
    bodyLow = isBullish(barsBack) or isBE(barsBack) ? open[barsBack] : close[barsBack]
    bodyLow >= bullFib and (not bullish or isBullish(barsBack) or isBE(barsBack))

// @function Checks if a specific bar is a shooting star candle based on a given fibonacci level.
// @param fib (float) The fibonacci level to base candle's body on. The default is 0.382.
// @param bearish (bool) True if the candle must to be red. The default is false.
// @param barsBack (int) The number of bars to look back. The default is 0 (current bar).
// @returns True if the bar matches the requirements of a shooting star candle, otherwise returns false.
export isShootingStar(float fib = 0.382, bool bearish = false, int barsBack = 0) =>
    bearFib = MktA.bearFibRet(low[barsBack], high[barsBack], fib)
    bodyHigh = isBullish(barsBack) or isBE(barsBack) ? close[barsBack] : open[barsBack]
    bodyHigh <= bearFib and (not bearish or isBearish(barsBack))
    
// @function Checks if a specific bar is a doji candle based on a given wick and body size.
// @param wickSize (float) The maximum top wick size compared to the bottom and vice versa. The default is 1.5.
// @param bodySize (bool) The maximum body size as a percentage compared to the entire candle size. The default is 5.
// @param barsBack (int) The number of bars to look back. The default is 0 (current bar).
// @returns True if the bar matches the requirements of a doji candle.
export isDoji(float wickSize = 1.5, float bodySize = 5, int barsBack = 0) =>
    getTopWickSize(barsBack) <= getBottomWickSize(barsBack) * wickSize and getBottomWickSize(barsBack) <= getTopWickSize(barsBack) * wickSize and getBodyPercent(barsBack) <= bodySize

// @function Checks if a specific bar is a bullish engulfing candle.
// @param gapTolernace (int) The maximum offset between the close of the engulfed candle and the open of the engulfing candle. This is a percentage of the engulfed candle. The default is 0.
// @param rejectionWickSize (int) The maximum top wick size compared to the body as a percentage. The default is 10.
// @param engulfWick (bool) True if the engulfed candle's wick requires to be engulfed as well. The default is false.
// @param barsBack (int) The number of bars to look back. The default is 0 (current bar).
// @returns True if the bar matches the requirements of a bullish engulfing candle.
export isBullishEC(int gapTolerance = 0, int rejectionWickSize = 10, bool engulfWick = false, int barsBack = 0) =>
  (isBearish(barsBack + 1) or isBE(barsBack + 1) and close[barsBack] > open[barsBack + 1] and open[barsBack] <= close[barsBack + 1] + gapTolerance) and 
  (not engulfWick or close[barsBack] >= high[barsBack + 1]) and 
  (getTopWickSize() / getBodySize() * 100 < rejectionWickSize)

// @function Checks if a specific bar is a bearish engulfing candle.
// @param gapTolernace (int) The maximum offset between the close of the engulfed candle and the open of the engulfing candle. This is a percentage of the engulfed candle. The default is 0.
// @param rejectionWickSize (int) The maximum bottom wick size compared to the body as a percentage. The default is 10.
// @param engulfWick (bool) True if the engulfed candle's wick requires to be engulfed as well. The default is false.
// @param barsBack (int) The number of bars to look back. The default is 0 (current bar).
// @returns True if the bar matches the requirements of a bearish engulfing candle.
export isBearishEC(int gapTolerance = 0, int rejectionWickSize = 10, bool engulfWick = false, int barsBack = 0) =>
  (isBullish(barsBack + 1) or isBE(barsBack + 1) and close[barsBack] < open[barsBack + 1] and open[barsBack] >= close[barsBack + 1] - gapTolerance) and 
  (not engulfWick or close[barsBack] <= low[barsBack + 1]) and
  (getBottomWickSize() / getBodySize() * 100 < rejectionWickSize)